// GBitmap + pixel data generated by bitmapgen.py:

static uint8_t s_0_pixels[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0xc0, 0xff, 0x03, 0x00, 0xe0, 0x81, 0x07, 0x00, /* bytes 0 - 16 */
    0xf0, 0x00, 0x0e, 0x00, 0x78, 0x00, 0x1c, 0x00, 0x38, 0x00, 0x18, 0x00, 0x18, 0x00, 0x38, 0x00, /* bytes 16 - 32 */
    0x1c, 0x00, 0x30, 0x00, 0x1c, 0x00, 0x70, 0x00, 0x0c, 0x00, 0x70, 0x00, 0x0e, 0x00, 0x70, 0x00, /* bytes 32 - 48 */
    0x0e, 0x00, 0x60, 0x00, 0x0e, 0x00, 0x60, 0x00, 0x0e, 0x00, 0xe0, 0x00, 0x0e, 0x00, 0xe0, 0x00, /* bytes 48 - 64 */
    0x0e, 0x00, 0xe0, 0x00, 0x06, 0x00, 0xe0, 0x00, 0x06, 0x00, 0xe0, 0x00, 0x06, 0x00, 0xe0, 0x00, /* bytes 64 - 80 */
    0x06, 0x00, 0xe0, 0x00, 0x0e, 0x00, 0xe0, 0x00, 0x0e, 0x00, 0xe0, 0x00, 0x0e, 0x00, 0xe0, 0x00, /* bytes 80 - 96 */
    0x0e, 0x00, 0x60, 0x00, 0x0e, 0x00, 0x60, 0x00, 0x0e, 0x00, 0x70, 0x00, 0x0c, 0x00, 0x70, 0x00, /* bytes 96 - 112 */
    0x1c, 0x00, 0x70, 0x00, 0x1c, 0x00, 0x30, 0x00, 0x18, 0x00, 0x38, 0x00, 0x38, 0x00, 0x38, 0x00, /* bytes 112 - 128 */
    0x30, 0x00, 0x1c, 0x00, 0x70, 0x00, 0x1e, 0x00, 0xe0, 0x01, 0x0f, 0x00, 0xc0, 0xff, 0x07, 0x00, /* bytes 128 - 144 */
    0x00, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 
};

  #ifdef PBL_COLOR

  #else
  static const GBitmap s_0_bitmap = {
    .addr = &s_0_pixels,
    .row_size_bytes = 4,
    .info_flags = 0x1000,
    .bounds = {
      .origin = { .x = 0, .y = 0 },
      .size = { .w = 24, .h = 38 },
    },
  };
  #endif

// GBitmap + pixel data generated by bitmapgen.py:

static uint8_t s_1_pixels[] = {
    0x00, 0x0c, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0xc0, 0x1f, 0x00, 0x00, /* bytes 0 - 16 */
    0xe0, 0x1c, 0x00, 0x00, 0x70, 0x1c, 0x00, 0x00, 0x3c, 0x1c, 0x00, 0x00, 0x1e, 0x1c, 0x00, 0x00, /* bytes 16 - 32 */
    0x04, 0x1c, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, /* bytes 32 - 48 */
    0x00, 0x1c, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, /* bytes 48 - 64 */
    0x00, 0x1c, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, /* bytes 64 - 80 */
    0x00, 0x1c, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, /* bytes 80 - 96 */
    0x00, 0x1c, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, /* bytes 96 - 112 */
    0x00, 0x1c, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, /* bytes 112 - 128 */
    0x00, 0x1c, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 
};

  #ifdef PBL_COLOR

  #else
  static const GBitmap s_1_bitmap = {
    .addr = &s_1_pixels,
    .row_size_bytes = 4,
    .info_flags = 0x1000,
    .bounds = {
      .origin = { .x = 0, .y = 0 },
      .size = { .w = 13, .h = 36 },
    },
  };
  #endif

// GBitmap + pixel data generated by bitmapgen.py:

static uint8_t s_2_pixels[] = {
    0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0x00, 0x00, 0xe0, 0xff, 0x03, 0x00, 0xf8, 0xc0, 0x07, 0x00, /* bytes 0 - 16 */
    0x3c, 0x00, 0x0f, 0x00, 0x0c, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x18, 0x00, /* bytes 16 - 32 */
    0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x18, 0x00, /* bytes 32 - 48 */
    0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x0c, 0x00, /* bytes 48 - 64 */
    0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x80, 0x03, 0x00, /* bytes 64 - 80 */
    0x00, 0xc0, 0x01, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, /* bytes 80 - 96 */
    0x00, 0x38, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, /* bytes 96 - 112 */
    0x80, 0x03, 0x00, 0x00, 0xc0, 0x01, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, /* bytes 112 - 128 */
    0x38, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0xfe, 0xff, 0x7f, 0x00, /* bytes 128 - 144 */
    0xfe, 0xff, 0x7f, 0x00, 
};

  #ifdef PBL_COLOR

  #else
  static const GBitmap s_2_bitmap = {
    .addr = &s_2_pixels,
    .row_size_bytes = 4,
    .info_flags = 0x1000,
    .bounds = {
      .origin = { .x = 0, .y = 0 },
      .size = { .w = 24, .h = 37 },
    },
  };
  #endif

// GBitmap + pixel data generated by bitmapgen.py:

static uint8_t s_3_pixels[] = {
    0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0x00, 0x00, 0xf0, 0xff, 0x03, 0x00, 0x7c, 0x80, 0x0f, 0x00, /* bytes 0 - 16 */
    0x1e, 0x00, 0x0e, 0x00, 0x06, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x38, 0x00, /* bytes 16 - 32 */
    0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x38, 0x00, /* bytes 32 - 48 */
    0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x0f, 0x00, /* bytes 48 - 64 */
    0x00, 0xc0, 0x03, 0x00, 0xc0, 0xff, 0x01, 0x00, 0xc0, 0x7f, 0x00, 0x00, 0xc0, 0xff, 0x03, 0x00, /* bytes 64 - 80 */
    0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x30, 0x00, /* bytes 80 - 96 */
    0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x70, 0x00, /* bytes 96 - 112 */
    0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x38, 0x00, /* bytes 112 - 128 */
    0x00, 0x00, 0x3c, 0x00, 0x01, 0x00, 0x1e, 0x00, 0x0f, 0x80, 0x0f, 0x00, 0xfe, 0xff, 0x03, 0x00, /* bytes 128 - 144 */
    0xf8, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
};



  #ifdef PBL_COLOR

  #else
 static const GBitmap s_3_bitmap = {
   .addr = &s_3_pixels,
   .row_size_bytes = 4,
    .info_flags = 0x1000,
    .bounds = {
      .origin = { .x = 0, .y = 0 },
      .size = { .w = 23, .h = 38 },
    },
  };
  #endif

// GBitmap + pixel data generated by bitmapgen.py:

static uint8_t s_4_pixels[] = {
    0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x80, 0x1b, 0x00, /* bytes 0 - 16 */
    0x00, 0x80, 0x19, 0x00, 0x00, 0xc0, 0x18, 0x00, 0x00, 0xe0, 0x18, 0x00, 0x00, 0x60, 0x18, 0x00, /* bytes 16 - 32 */
    0x00, 0x30, 0x1c, 0x00, 0x00, 0x38, 0x1c, 0x00, 0x00, 0x1c, 0x1c, 0x00, 0x00, 0x0c, 0x1c, 0x00, /* bytes 32 - 48 */
    0x00, 0x0e, 0x1c, 0x00, 0x00, 0x07, 0x1c, 0x00, 0x00, 0x03, 0x1c, 0x00, 0x80, 0x01, 0x1c, 0x00, /* bytes 48 - 64 */
    0xc0, 0x01, 0x1c, 0x00, 0xc0, 0x00, 0x1c, 0x00, 0x60, 0x00, 0x1c, 0x00, 0x70, 0x00, 0x1c, 0x00, /* bytes 64 - 80 */
    0x38, 0x00, 0x1c, 0x00, 0x18, 0x00, 0x1c, 0x00, 0x1c, 0x00, 0x1c, 0x00, 0x0e, 0x00, 0x1c, 0x00, /* bytes 80 - 96 */
    0x06, 0x00, 0x1c, 0x00, 0xff, 0xff, 0xff, 0x07, 0xff, 0xff, 0xff, 0x07, 0x00, 0x00, 0x1c, 0x00, /* bytes 96 - 112 */
    0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x1c, 0x00, /* bytes 112 - 128 */
    0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x1c, 0x00, 
};



  #ifdef PBL_COLOR

  #else
  static const GBitmap s_4_bitmap = {
    .addr = &s_4_pixels,
    .row_size_bytes = 4,
    .info_flags = 0x1000,
    .bounds = {
      .origin = { .x = 0, .y = 0 },
      .size = { .w = 27, .h = 36 },
    },
  };
  #endif

// GBitmap + pixel data generated by bitmapgen.py:

static uint8_t s_5_pixels[] = {
    0xf8, 0xff, 0x0f, 0x00, 0xf8, 0xff, 0x0f, 0x00, 0xf8, 0xff, 0x0f, 0x00, 0x18, 0x00, 0x00, 0x00, /* bytes 0 - 16 */
    0x18, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, /* bytes 16 - 32 */
    0x1c, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, /* bytes 32 - 48 */
    0x0c, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0xfc, 0xff, 0x00, 0x00, /* bytes 48 - 64 */
    0xfc, 0xff, 0x03, 0x00, 0x00, 0x80, 0x07, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x1c, 0x00, /* bytes 64 - 80 */
    0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x30, 0x00, /* bytes 80 - 96 */
    0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x30, 0x00, /* bytes 96 - 112 */
    0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x1e, 0x00, /* bytes 112 - 128 */
    0x02, 0x00, 0x0f, 0x00, 0x0f, 0xc0, 0x07, 0x00, 0xfe, 0xff, 0x01, 0x00, 0xf8, 0x7f, 0x00, 0x00, /* bytes 128 - 144 */
    0x00, 0x00, 0x00, 0x00, 
};



  #ifdef PBL_COLOR

  #else
  static const GBitmap s_5_bitmap = {
    .addr = &s_5_pixels,
    .row_size_bytes = 4,
    .info_flags = 0x1000,
    .bounds = {
      .origin = { .x = 0, .y = 0 },
      .size = { .w = 22, .h = 37 },
    },
  };
  #endif

// GBitmap + pixel data generated by bitmapgen.py:

static uint8_t s_6_pixels[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x0f, 0x00, 0x00, 0xff, 0x0f, 0x00, 0x80, 0x07, 0x00, 0x00, /* bytes 0 - 16 */
    0xc0, 0x01, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, /* bytes 16 - 32 */
    0x18, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, /* bytes 32 - 48 */
    0x0e, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x06, 0xfe, 0x00, 0x00, /* bytes 48 - 64 */
    0x86, 0xff, 0x03, 0x00, 0xe7, 0x81, 0x0f, 0x00, 0x77, 0x00, 0x1e, 0x00, 0x1f, 0x00, 0x1c, 0x00, /* bytes 64 - 80 */
    0x1f, 0x00, 0x38, 0x00, 0x0f, 0x00, 0x30, 0x00, 0x07, 0x00, 0x30, 0x00, 0x07, 0x00, 0x70, 0x00, /* bytes 80 - 96 */
    0x07, 0x00, 0x70, 0x00, 0x07, 0x00, 0x70, 0x00, 0x06, 0x00, 0x70, 0x00, 0x06, 0x00, 0x70, 0x00, /* bytes 96 - 112 */
    0x0e, 0x00, 0x70, 0x00, 0x0e, 0x00, 0x30, 0x00, 0x0c, 0x00, 0x38, 0x00, 0x1c, 0x00, 0x38, 0x00, /* bytes 112 - 128 */
    0x38, 0x00, 0x1c, 0x00, 0x78, 0x00, 0x1e, 0x00, 0xf0, 0x00, 0x0f, 0x00, 0xe0, 0xff, 0x07, 0x00, /* bytes 128 - 144 */
    0x80, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 
};

  #ifdef PBL_COLOR

  #else
  static const GBitmap s_6_bitmap = {
    .addr = &s_6_pixels,
    .row_size_bytes = 4,
    .info_flags = 0x1000,
    .bounds = {
      .origin = { .x = 0, .y = 0 },
      .size = { .w = 23, .h = 38 },
    },
  };
  #endif




// GBitmap + pixel data generated by bitmapgen.py:

static uint8_t s_7_pixels[] = {
    0xfe, 0xff, 0xff, 0x00, 0xfe, 0xff, 0xff, 0x00, 0xfe, 0xff, 0xff, 0x00, 0x00, 0x00, 0x70, 0x00, /* bytes 0 - 16 */
    0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x18, 0x00, /* bytes 16 - 32 */
    0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x0e, 0x00, /* bytes 32 - 48 */
    0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x80, 0x03, 0x00, /* bytes 48 - 64 */
    0x00, 0x80, 0x01, 0x00, 0x00, 0xc0, 0x01, 0x00, 0x00, 0xc0, 0x01, 0x00, 0x00, 0xe0, 0x00, 0x00, /* bytes 64 - 80 */
    0x00, 0xe0, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, /* bytes 80 - 96 */
    0x00, 0x38, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, /* bytes 96 - 112 */
    0x00, 0x0e, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, /* bytes 112 - 128 */
    0x00, 0x07, 0x00, 0x00, 0x80, 0x03, 0x00, 0x00, 0x80, 0x03, 0x00, 0x00, 0xc0, 0x01, 0x00, 0x00, 
};


  #ifdef PBL_COLOR

  #else
  static const GBitmap s_7_bitmap = {
    .addr = &s_7_pixels,
    .row_size_bytes = 4,
    .info_flags = 0x1000,
    .bounds = {
      .origin = { .x = 0, .y = 0 },
      .size = { .w = 24, .h = 36 },
    },
  };
  #endif


// GBitmap + pixel data generated by bitmapgen.py:

static uint8_t s_8_pixels[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x01, 0x00, 0xc0, 0xff, 0x07, 0x00, 0xf0, 0x01, 0x0f, 0x00, /* bytes 0 - 16 */
    0x70, 0x00, 0x1c, 0x00, 0x38, 0x00, 0x18, 0x00, 0x18, 0x00, 0x38, 0x00, 0x1c, 0x00, 0x30, 0x00, /* bytes 16 - 32 */
    0x1c, 0x00, 0x30, 0x00, 0x1c, 0x00, 0x30, 0x00, 0x1c, 0x00, 0x30, 0x00, 0x1c, 0x00, 0x38, 0x00, /* bytes 32 - 48 */
    0x38, 0x00, 0x38, 0x00, 0x38, 0x00, 0x1c, 0x00, 0x70, 0x00, 0x0e, 0x00, 0xe0, 0x01, 0x07, 0x00, /* bytes 48 - 64 */
    0xc0, 0xc7, 0x03, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0xc0, 0xe7, 0x03, 0x00, /* bytes 64 - 80 */
    0xe0, 0x81, 0x0f, 0x00, 0x70, 0x00, 0x1e, 0x00, 0x38, 0x00, 0x3c, 0x00, 0x1c, 0x00, 0x38, 0x00, /* bytes 80 - 96 */
    0x0c, 0x00, 0x70, 0x00, 0x0e, 0x00, 0x60, 0x00, 0x0e, 0x00, 0x60, 0x00, 0x0e, 0x00, 0x60, 0x00, /* bytes 96 - 112 */
    0x06, 0x00, 0x60, 0x00, 0x0e, 0x00, 0x60, 0x00, 0x0e, 0x00, 0x60, 0x00, 0x0c, 0x00, 0x70, 0x00, /* bytes 112 - 128 */
    0x1c, 0x00, 0x38, 0x00, 0x38, 0x00, 0x3c, 0x00, 0xf8, 0x00, 0x1f, 0x00, 0xe0, 0xff, 0x07, 0x00, /* bytes 128 - 144 */
    0xc0, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 
};

  #ifdef PBL_COLOR

  #else

  #endif

  #ifdef PBL_COLOR

  #else
  static const GBitmap s_8_bitmap = {
    .addr = &s_8_pixels,
    .row_size_bytes = 4,
    .info_flags = 0x1000,
    .bounds = {
      .origin = { .x = 0, .y = 0 },
      .size = { .w = 24, .h = 38 },
    },
  };
  #endif



// GBitmap + pixel data generated by bitmapgen.py:

static uint8_t s_9_pixels[] = {
    0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0x00, 0x00, 0xc0, 0xff, 0x03, 0x00, 0xf0, 0x80, 0x07, 0x00, /* bytes 0 - 16 */
    0x78, 0x00, 0x0e, 0x00, 0x38, 0x00, 0x1c, 0x00, 0x1c, 0x00, 0x18, 0x00, 0x0c, 0x00, 0x38, 0x00, /* bytes 16 - 32 */
    0x0e, 0x00, 0x30, 0x00, 0x0e, 0x00, 0x30, 0x00, 0x06, 0x00, 0x70, 0x00, 0x06, 0x00, 0x70, 0x00, /* bytes 32 - 48 */
    0x06, 0x00, 0x60, 0x00, 0x06, 0x00, 0x60, 0x00, 0x06, 0x00, 0x60, 0x00, 0x0e, 0x00, 0x70, 0x00, /* bytes 48 - 64 */
    0x0e, 0x00, 0x70, 0x00, 0x0c, 0x00, 0x78, 0x00, 0x1c, 0x00, 0x7c, 0x00, 0x38, 0x00, 0x6e, 0x00, /* bytes 64 - 80 */
    0x70, 0x80, 0x67, 0x00, 0xe0, 0xff, 0x61, 0x00, 0x80, 0x7f, 0x70, 0x00, 0x00, 0x00, 0x70, 0x00, /* bytes 80 - 96 */
    0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x38, 0x00, /* bytes 96 - 112 */
    0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x0e, 0x00, /* bytes 112 - 128 */
    0x00, 0x00, 0x07, 0x00, 0x00, 0x80, 0x03, 0x00, 0x00, 0xe0, 0x01, 0x00, 0xf8, 0xff, 0x00, 0x00, /* bytes 128 - 144 */
    0xf8, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
};

  #ifdef PBL_COLOR

  #else
  static const GBitmap s_9_bitmap = {
    .addr = &s_9_pixels,
    .row_size_bytes = 4,
    .info_flags = 0x1000,
    .bounds = {
      .origin = { .x = 0, .y = 0 },
      .size = { .w = 24, .h = 38 },
    },
  };
  #endif




